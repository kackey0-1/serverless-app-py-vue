AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Specification template describing your function.
Resources:
  postImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-app-sam/7da2aa8cc7688fa79fa536dafe3645a4
      Handler: post-images.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::618448440758:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-vue
          TABLE_NAME: photos
  updateImage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-app-sam/19f7a2329dec8282d531cb204dbbc22a
      Handler: update-image.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::618448440758:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-vue
          TABLE_NAME: photos
  getImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-app-sam/35f5468d66770f4c01bb071967e04d8e
      Handler: get-images.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::618448440758:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-vue
          TABLE_NAME: photos
  getImageById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-app-sam/9a4d7e40d9d2ba7118eadbd879c2adae
      Handler: get-image-by-id.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::618448440758:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-vue
          TABLE_NAME: photos
  deleteImageById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://serverless-app-sam/19da28017a86a7789d36c98e459014ff
      Handler: delete-image-by-id.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::618448440758:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-vue
          TABLE_NAME: photos
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '1.0'
          title: serverless-app
        schemes:
        - https
        paths:
          /images:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${getImages.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${postImages.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            put:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${updateImage.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,\
                        \ POST, PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /images/{id}:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${getImageById.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            delete:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${deleteImageById.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,\
                        \ POST, PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
  getImagesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: getImages
      Principal: apigateway.amazonaws.com
  postImagesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: postImages
      Principal: apigateway.amazonaws.com
  updateImagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: updateImage
      Principal: apigateway.amazonaws.com
  getImageByIdPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: getImageById
      Principal: apigateway.amazonaws.com
  deleteImageByIdPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: deleteImageById
      Principal: apigateway.amazonaws.com
